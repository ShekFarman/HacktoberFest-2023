#include <iostream>
#include <vector>
#include <algorithm>
#include <climits>

using namespace std;

int coinChange(vector<int>& coins, int amount) {
    // Create a DP array to store the minimum number of coins for each amount
    vector<int> dp(amount + 1, INT_MAX); // Initialize with maximum possible value (infinity)
    dp[0] = 0; // Base case: To make sum 0, you need 0 coins

    // Iterate through all amounts from 1 to the given amount
    for (int i = 1; i <= amount; i++) {
        // For each coin, check if it can contribute to the current amount
        for (int coin : coins) {
            if (i - coin >= 0 && dp[i - coin] != INT_MAX) {
                dp[i] = min(dp[i], dp[i - coin] + 1);
            }
        }
    }

    // If dp[amount] is still infinity, that means we can't make that amount
    return dp[amount] == INT_MAX ? -1 : dp[amount];
}

int main() {
    // Example coin set and amount
    vector<int> coins = {1, 2, 5}; // Set of coins
    int amount = 11;               // Target amount

    int result = coinChange(coins, amount);

    if (result != -1) {
        cout << "Minimum coins needed: " << result << endl;
    } else {
        cout << "It's not possible to make the amount with the given coins." << endl;
    }

    return 0;
}
